{"title":"Liferay Learning","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"Let's Learn!","content":" First highlight. It'll blow your mind. Donec sed odio dui. Etiam porta sem malesuada magna mollis euismod. Nullam id dolor id nibh ultricies vehicula ut id elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros praesent commodo ultricies vehicula ut. It's that good. See for yourself. Donec sed odio dui. Etiam porta sem malesuada magna mollis euismod. Nullam id dolor id nibh ultricies vehicula ut id elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros praesent commodo ultricies vehicula ut. And lastly, this one. Checkmate. Donec sed odio dui. Etiam porta sem malesuada magna mollis euismod. Nullam id dolor id nibh ultricies vehicula ut id elit. Morbi leo risus, porta ac consectetur ac, vestibulum at eros praesent commodo ultricies vehicula ut. ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"docs":{"children":{"empty":{"title":"empty page","description":"empty page","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Headline some introduction Pro Tip An interesting fact, to be displayed as Pro Tip in a little box. Another Headline Sub Headline A list of items to display ","srcFilePath":"src/pages/docs/empty.md","id":"empty","location":"/docs/empty.html","url":"/docs/empty.html"},"foundational-concepts":{"children":{"04-usermanagement":{"title":"User Management","description":"User Management","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} User Management We didn’t do a lot in Liferay yet, but in order to change something, we’ll need to sign in - and that’s where User Management comes in. A platform like Liferay has you covered with User Management - and what you’ve seen is only the basics. We can do a lot more, but will only show this after introducing content-related topics. Why stick with user management for too long in the beginning, when there’s still no content? Well, we don’t. Here’s your takeaway from this chapter, together with an outlook on the later chapters - to help you paint a mental picture. Pro Tip Check your own installation for all the features that you've seen in the previous video. You should be able to find all of the different places, even though the layout might differ slightly because the video has been recorded on a previous version of Liferay (DXP 7.0). Your Takeaways User Management Users always have an entry in Liferay’s Database It’s possible to interface with external user management system (not yet handled), but users will always be in Liferay’s Database User accounts may be active (e.g. can log in) or inactive (can’t log in) Users have almost no permissions by default, other than maintaining their own profile Later we’ll even introduce mechanics to follow individual users around when they’re not signed in. Grouping Users In a sufficiently large installation (let’s say, more than 10 registered users) you probably do not want to grant permissions on a user-by-user-basis. This means that we’ll need a way to talk about multiple users at once. Liferay provides two mechanisms: Organization: can be arranged in a hierarchy. The hierarchy can have multiple root organizations - e.g. is not limited to a single root Membership in a child-organization (in a hierarchy) automatically implies membership in the parent organization can “have” a site (what’s a site you ask? One of the very next chapters - if not the next - will cover this) typically used for mirroring some underlying structure (potentially hierarchical) in the real world - e.g. a company and its departments or locations. User Groups: No Hierarchy have as many as you like to handle groups of users, wherever you’d like to handle individual users Can have site templates to build personal sites (a feature that will be handled in a later chapter) are arbitrary collections that can be done for whatever reason - they might not even have equivalent natural groups in the physical world. often User Groups are used to import LDAP-Groups (if you interface with LDAP, which we’ll cover in a later chapter) What you might find when you explore these options… You’ll see that you can also create a “Location” as an Organization. This is a special type of Organizations that can’t have any more siblings - e.g. it’s the lower end of the hierarchy. You may use it if you definitely want to document that there can’t be any more siblings. Note that you can’t change the organization type later on - you’ll stay more flexible when you just use the standard type (Organization) and simply not add any child sites to it) Exercise Think of your usecase for Liferay and make a sketch for the structure of your user base. If you have only a manageable size of (known) users, you might choose to create accounts that you’ll use throughout this course for the various responsibilities that these users have. If you have a huge amount of users, you might want to choose 3-4 example personas and create accounts for them. For the purpose of this course, you'll be the one impersonating your users, so make use of their names, email addresses and passwords. If you have an installation that actually sends out mails, and you're looking for actual mail addresses but don't want to create many, you may try out this trick that some providers (e.g. gmail) support: If your email address is example@gmail.com, then example+admin@gmail.com, example+regularuser@gmail.com etc will all be delivered to your main address - you can make up anything between the \"+\" and \"@\" sign. Then think of the content that you’ll have in your portal. Will it be different content, e.g. department by department? Or for individual projects? Will the users be signing up for areas of their interest by themselves or will their access be centrally managed? Will you have largely public content, visible to everybody anyways? Or will it be largely private content, that requires logging in How many people will have write access - and will they have write access to individual areas, or to all of the content on your site? Sketch them out and have them ready when we build content for the site. ","srcFilePath":"src/pages/docs/foundational-concepts/04-usermanagement.md","id":"04-usermanagement","location":"/docs/foundational-concepts/04-usermanagement.html","url":"/docs/foundational-concepts/04-usermanagement.html"},"10-pagemanagement":{"title":"Page Management","description":"Page Management","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Page Management Pro Tip The full documentation for these topics can be found here When you are experimenting a bit with the different page types - figure out if there are other types than “Widget” that you want to make use of. Try “Panel”, “URL”, and “Link to page of this site” for example to figure out what they’re doing, what you can configure. Create a new page and change its type to one of the alternatives. See if you can find out what they’re doing. The vast majority of your time, you’ll probably use the “Widget” type, but it’s worth knowing that there are other alternatives. Note that we'll cover the \"Content\" pages in a different chapter - we'll need some additional introduction for those. This is a new page type in Liferay DXP 7.1 Pro Tip An interesting fact, to be displayed as Pro Tip in a little box. Another Headline Sub Headline A list of items to display ","srcFilePath":"src/pages/docs/foundational-concepts/10-pagemanagement.md","id":"10-pagemanagement","location":"/docs/foundational-concepts/10-pagemanagement.html","url":"/docs/foundational-concepts/10-pagemanagement.html"},"30-personal-space":{"title":"Personal Pages","description":"Personal Pages","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Creating personal pages for all your users When you look at the default settings in portal.properties, you’ll see that one page for the dashboard (“private”) and profile (“public”) is automatically generated for each user. And if you wondered how to change their look&feel, or content, or how to add or remove functionality: This is your chapter. First: Let's deactivate the default Let’s set up our system so that it is all managed the same way: We’ll deactivate the crude default dashboards and profiles in portal.properties, and then maintain all user’s personal pages through User Groups and Site Templates. If you have portal-ext.properties in your installation’s home directory already, open it. Otherwise create it. When you can’t remember what the home directory is, or what portal-ext.properties contains, check back with the Basic Configuration chapter. Add the following lines to the file (bold lines are changed values from default, italics are unchanged default values for your information) # Set whether or not private layouts are enabled. Set whether or not private # layouts should be auto created if a user has no private layouts. If # private layouts are not enabled, then the property # \"layout.user.private.layouts.auto.create\" is assumed to be false. # # layout.user.private.layouts.enabled=true layout.user.private.layouts.auto.create=false # # Set whether or not public layouts are enabled. Set whether or not public # layouts should be auto created if a user has no public layouts. If public # layouts are not enabled, then the property # \"layout.user.public.layouts.auto.create\" is assumed to be false. # # layout.user.public.layouts.enabled=true layout.user.public.layouts.auto.create=false Pro Tip Unfortunately, changes to portal-ext.properties require a restart of Liferay in order to be picked up. When you're on Windows, and File-Explorer doesn't show file extensions by default, make sure that the actual file name is portal-ext.properties, e.g. the file type should be shown as \"properties\", not as \"text file\" or \"txt file\" After this configuration step and the associated restart, you'll easily see that the default pages are no longer there. Now we'll need to create new pages, that we can maintain through the user interface, and assign to the people that we want to have them associated with. Create a Site Template, consisting of one page with two portlets Navigate to \"Control Panel / Sites / Site Templates\". Add a new Site Template named \"User Dashboard\". Then click on the Template's name to navigate to the default page of this template. You'll see an empty page, which you can change to your heart's content: Make it a 2-column layout, adding the \"Profile\" widget to the left column and the \"Activities\" widget to the right column. Both applications will show content from a user's profile, e.g. a user's name and profile image, or recent message board participation or blog articles. You may create more pages if you like, but it's not necessary. Page creation works just like with regular pages. You'll see that some widgets behave differently than on regular pages though - explore what that means. There are certain widgets that are meant to be on personal pages, like the Profile and Activities portlet, that need the context from those pages and can't be used on regular pages. Create user group Now that we want to assign this Site Template to more users, we need to do so via a User Group. Go to \"Control Panel / Users / User Groups\", and create a new User Group named \"Dashboarders\". In \"My Dashboard\", select the Site Template that you've just created. Assign user group to own user When you've saved the User Group, select \"Assign Members\" from the User Group's action menu (or just click the User Group's name) and make your own user account a member of this user group. Alternatively, you could also go to \"Control Panel / Users / Users and Organizations\", find your own user account and edit it - go to the \"Memberships\" section and add yourself to the \"Dashboarders\" user group. check Dashboard / Profile Click on your user name in the left column and validate that \"My Dashboard\" can be navigated to. Do so and validate that the portlets from the Site Template now exist in your dashboard, showing your personal information (at this time of the training, you probably won't have any \"activities\") assign user group to all users by default Assigning such User Groups individually won't scale. We can apply this User Group to all users by default. For this, go to \"Control Panel / Configuration / Instance Settings\" and open the \"Users\" section, click \"Default User Associations\" and enter \"Dashboarders\" (or the name of your user group) under \"User Groups\". Observe the little help icon, where it says \"Enter the default user group names per line that are associated with newly created users\". You can optionally also check the checkbox \"apply to existing users\". ","srcFilePath":"src/pages/docs/foundational-concepts/30-personal-space.md","id":"30-personal-space","location":"/docs/foundational-concepts/30-personal-space.html","url":"/docs/foundational-concepts/30-personal-space.html"}},"childIds":["10-pagemanagement","30-personal-space","04-usermanagement"]},"osgi-basics":{"children":{"create-another-service":{"title":"Deploy","description":"Let's get started!","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Deploy Multiple Implementations of a Service Each API can have multiple service implementations. Let’s try it out to see how multiple service implementations interact in the OSGi runtime. Pro Tip If you run into problems, or if something in here is unclear, check out the video in the next chapter for a step-by-step walkthrough video of the entire exercise. Your Task Create a new OSGi service that overrides the helloworld API. package com.liferay.university.hello.uppercase.impl; import com.liferay.university.hello.api.HelloService; import org.osgi.service.component.annotations.Component; @Component( immediate = true, service = HelloService.class ) public class HelloUppercaseServiceImpl implements HelloService { @Override public String hello(String parameter) { return parameter.toUpperCase(); } } Pro Tip Notice that we're using another package here (\"com.liferay.university.hello.uppercase.impl\"). OSGi works best when every package is published by exactly one bundle. Before Deployment Check that your command from the first exercise still works. g! lb helloworld g! say hello hello Deploy Your New Service Implementation Next, deploy your new service implementation. Now that you have two implementations for the helloworld API, what do you expect to be printed now? hello or HELLO Determining Service Implementation Priority OSGi has the choice to freely bind whatever it needs. The requirement to have a service is satisfied by either of the two implementations. As the service is already bound, there’s no need to rebind. Service Bundle ID In fact, one of OSGi’s strategies to determine which service has higher priority is the service bundle id - in this case the original implementation: A lower id has higher priority and will be preferred over a higher id. But Wait, There’s More You might have heard about another criterion, one that you can influence: It’s called service rank. By default, services have a rank of 0, and if you configure a higher rank, the higher ranked service is preferred. Note: For services with the same rank, the OSGi runtime will determine priority by id. Service Rank Let’s change our implementation and revalidate. Again: Think about your expectation. Make a mental or write it down. @Component( immediate = true, property = { \"service.ranking:Integer=100\" }, service = HelloService.class ) public class HelloUppercaseServiceImpl implements HelloService { @Override public String hello(String parameter) { return parameter.toUpperCase(); } } Note: Developer Studio can redeploy your service automatically. Check Gogo Shell g! lb helloworld START LEVEL 20 ID|State |Level|Name 590|Active | 1|helloworld-api (1.0.0) 591|Active | 1|helloworld-service (1.0.0) 592|Active | 1|helloworld-command (1.0.0) 593|Active | 1|helloworld-capitalization-service (1.0.0) g! stop 592 g! start 592 g! say hello HELLO So, there we are: The higher ranking service has been bound when the command has been restarted - it was the highest service rank available when they were looked up. Learn By Experimenting Figure out what happens when you stop the highest ranking service, and start it again. Think about your expectations beforehand. Service References Static Binding You’ve learned that the reference to services defaults to being static and will only be reconsidered upon restarting the dependent service - in our case the Gogo shell command. Dynamic Binding But what if you want to be more dynamic? This works as well, but you’ll need to let the runtime know that you’d like to get an updated service whenever a better one is available. Here’s an implementation for such a case. @Component( immediate = true, property = { \"osgi.command.function=say\", \"osgi.command.scope=custom\" }, service = Object.class ) public class HelloWorldCommand { public void say(String what) { System.out.println(helloService.hello(what)); } @Reference( policy=ReferencePolicy.DYNAMIC, policyOption=ReferencePolicyOption.GREEDY, cardinality=ReferenceCardinality.MANDATORY) protected void setHelloService(HelloService helloService) { System.out.println(\"Setting \" + helloService.getClass().getName()); this.helloService = helloService; } protected void unsetHelloService(HelloService helloService) { System.out.println(\"Unsetting helloService \" + helloService.getClass().getName()); if (helloService == this.helloService) { this.helloService = null; } } private HelloService helloService; } Note: We now need a specific set and unset method for our reference, according to the OSGi specification: Try It! Deploy the new command, then restart the service implementations as you like. Validate the behavior of the system. Did the results match your expectations? Well, at least you’ve seen one area where common expectation and the actual behavior of the runtime can differ. But that’s easy to fix, once you know what to expect. More References As promised: Liferay's documentation has fabulous chapters about more options. Because we explicitly only want to cover the bare minimum - please see the documentation for more details. We hope you've gotten some good hints here and have a better understanding of the runtime behavior set: Overriding service references Using Felix Gogo Shell ","srcFilePath":"src/pages/docs/osgi-basics/create-another-service.md","id":"create-another-service","location":"/docs/osgi-basics/create-another-service.html","url":"/docs/osgi-basics/create-another-service.html"},"your-first-service":{"title":"Exercise: Your First Service","description":"Let's get started!","icon":"flash","layout":"guide","weight":1,"content":" {$page.description} Install Liferay Developer Tools In order to follow the exercise in the video, you’ll need to install the following: Liferay Developer Studio Liferay Workspace Pro Tip If this exercise text leaves questions open, the next chapter contains a step-by-step walkthrough video of installing Liferay Developer Studio and Liferay Workspace, as well as the exercise itself. Feel free to watch it during the exercise or if you run into problems. Exercise Overview For the first demonstration, we’ll create three projects: a simple API for the service a service implementation a client to call the service As we want to be as simple as possible, we’ll stick with the most basic components. Liferay comes with a shell, called Gogo Shell. The Gogo Shell allows us to interact with the OSGi container and execute the client we are creating to run our service. Service API To start, we’ll create a simple API using the wizards provided by Liferay Developer Studio. Create the Project Open Liferay Developer Studio Create a Liferay Module Project Name the project: “helloworld-api” For Project Template Name, select “api” from the drop down Click Next Complete the Module Details Component Class Name: HelloService Package Name: com.liferay.university.hello.api Click Finish Create the Service API Open HelloService.java Add the hello method signature below package com.liferay.university.hello.api; public interface HelloService { String hello(String parameter); } Liferay Developer Studio, along with Liferay Workspace, will create a proper project structure for you, including the following bnd.bnd file: Bundle-Name: helloworld-api Bundle-SymbolicName: com.liferay.university.hello.api Bundle-Version: 1.0.0 Export-Package: com.liferay.university.hello.api Deploy to Your Container When this project is built, we’ll have a bundle that we can deploy to any OSGi container. Let's start Liferay within Liferay Developer Studio and use the OSGi container that is embedded into Liferay. Verify Your Service in the Gogo Shell Open a telnet client on localhost, port 11311, to access Gogo Shell Type g! lb helloworld to list all the bundles (lb) that have “helloworld” in their name g! lb helloworld START LEVEL 20 ID|State |Level|Name 590|Active | 1|helloworld-api (1.0.0) Service Implementation Create Now create a second project with the service implementation. Create a new service project in Liferay Developer Studio. Name the project helloworld-service When the project is created, take a look at the HelloServiceImpl class: package com.liferay.university.hello.impl; import com.liferay.university.hello.api.HelloService; import org.osgi.service.component.annotations.Component; @Component public class HelloServiceImpl implements HelloService { @Override public String hello(String parameter) { return parameter; } } Notice that the class “HelloService” is showing up as unresolved. To fix this, let’s import our interface. The gradle implementation in Liferay Workspace makes other modules from the same workspace easily available. Open build.gradle Add the following line to the existing dependencies: compileOnly project(\":modules:helloworld-api\") Next, we need to get gradle to pick up the changed dependencies. Right-click and choose “Gradle/Refresh Gradle Project” The resulting project will automatically deploy to Liferay, ending up with both of our projects being available: g! lb helloworld START LEVEL 20 ID|State |Level|Name 590|Active | 1|helloworld-api (1.0.0) 591|Active | 1|helloworld-service (1.0.0) Calling the Service To call the service, let’s build a quick and dirty Gogo-Shell command that utilizes our service: Create another project of type “service” Name the project “helloworld-command” Note: This bundle will also depend on helloworld-api, just like the service implementation. Add the same dependency as above to build.gradle.Next, let’s call the relevant HelloService implementation and display the results in Gogo Shell. package com.liferay.university.command; import com.liferay.university.hello.api.HelloService; import org.osgi.service.component.annotations.Component; import org.osgi.service.component.annotations.Reference; @Component( immediate=true, service = Object.class, property = { \"osgi.command.function=say\", \"osgi.command.scope=custom\" } ) public class HelloWorldCommand { public void say(String what) { System.out.println(helloService.hello(what)); } @Reference private HelloService helloService; } The @Component declaration will make sure that we can easily use this class as a command in Gogo Shell. Let’s try this: On Gogo Shell, validate that your service is deployed and active: Let’s try this: Validate that your service is deployed and active in Gogo Shell: g! lb helloworld START LEVEL 20 ID|State |Level|Name 590|Active | 1|helloworld-api (1.0.0) 591|Active | 1|helloworld-service (1.0.0) 592|Active | 1|helloworld-command (1.0.0) Now type: g! say hello hello Congratulations, your first and simplest possible OSGi Declarative Service. Dependency Injection Through OSGi Let’s use this simple code for further experimentation with Gogo Shell and mess with the runtime. Note: Replace “591” with the ID for your service from Gogo Shell. g! stop 591 g! say hello gogo: CommandNotFoundException: Command not found: say What Happened? g! lb helloworld START LEVEL 20 ID|State |Level|Name 590|Active | 1|helloworld-api (1.0.0) 591|Resolved | 1|helloworld-service (1.0.0) 592|Resolved | 1|helloworld-command (1.0.0) Again: What Happened? The helloworld-command service has a dependency on “helloworld-service” that is no longer satisfied. Thus, the OSGi runtime has not only stopped the service implementation, but also the helloworld-command service. Next, start the helloworld-service bundle again and see if helloworld-command is restarted as well. OSGi Bundle Lifecycle This brings us to the lifecycle of an OSGi bundle. As soon as you have deployed a bundle into an OSGi runtime, the runtime will attempt to resolve all available dependencies: Let’s keep things simple with this first exercise, and make it more interesting in the next exercise. We’ll introduce a second implementation for our API and see if the new deployment meets your expectations. ","srcFilePath":"src/pages/docs/osgi-basics/your-first-service.md","id":"your-first-service","location":"/docs/osgi-basics/your-first-service.html","url":"/docs/osgi-basics/your-first-service.html"}},"title":"Deploy","description":"Let's get started!","layout":"guide","icon":"cloud","weight":4,"content":" {$page.description} Deploy Multiple Implementations Of A Service Each API can have multiple service implementations. Let’s try it out to see how multiple service implementations interact in the OSGi runtime. Pro Tip If you run into problems, check out the video in the previous chapter for a step-by-step walkthrough of the entire exercise. Your Task Create a new OSGi service that overrides the helloworld API. package com.liferay.university.hello.uppercase.impl; import com.liferay.university.hello.api.HelloService; import org.osgi.service.component.annotations.Component; @Component( immediate = true, service = HelloService.class ) public class HelloUppercaseServiceImpl implements HelloService { @Override public String hello(String parameter) { return parameter.toUpperCase(); } } Pro Tip Notice that we're using another package here (\"com.liferay.university.hello.uppercase.impl\"). OSGi works best when every package is published by exactly one bundle. Before Deployment Check that your command from the first exercise still works. g! lb helloworld g! say hello hello Deploy Your New Service Implementation Next, deploy your new service implementation. Now that you have two implementations for the helloworld API, what do you expect to be printed now? hello or HELLO Determining Service Implementation Priority OSGi has the choice to freely bind whatever it needs. The requirement to have a service is satisfied by either of the two implementations. As the service is already bound, there’s no need to rebind. Service Bundle ID In fact, one of OSGi’s strategies to determine which service has higher priority is the service bundle id - in this case the original implementation: A lower id has higher priority and will be preferred over a higher id. But Wait, There’s More You might have heard about another criterion, one that you can influence: It’s called service rank. By default, services have a rank of 0, and if you configure a higher rank, the higher ranked service is preferred. Note: For services with the same rank, the OSGi runtime will determine priority by id. Service Rank Let’s change our implementation and revalidate. Again: Think about your expectation. Make a mental or write it down. @Component( immediate = true, property = { \"service.ranking:Integer=100\" }, service = HelloService.class ) public class HelloUppercaseServiceImpl implements HelloService { @Override public String hello(String parameter) { return parameter.toUpperCase(); } } Note: Developer Studio can redeploy your service automatically. Check Gogo Shell g! lb helloworld START LEVEL 20 ID|State |Level|Name 590|Active | 1|helloworld-api (1.0.0) 591|Active | 1|helloworld-service (1.0.0) 592|Active | 1|helloworld-command (1.0.0) 593|Active | 1|helloworld-capitalization-service (1.0.0) g! stop 592 g! start 592 g! say hello So, there we are: The higher ranking service has been bound when the command has been restarted - it was the highest service rank available when they were looked up. Learn By Experimenting Figure out what happens when you stop the highest ranking service, and start it again. Think about your expectations beforehand. Service References Static Binding You’ve learned that the reference to services defaults to being static and will only be reconsidered upon restarting the dependent service - in our case the Gogo shell command. Dynamic Binding But what if you want to be more dynamic? This works as well, but you’ll need to let the runtime know that you’d like to get an updated service whenever a better one is available. Here’s an implementation for such a case. @Component( immediate = true, property = { \"osgi.command.function=say\", \"osgi.command.scope=custom\" }, service = Object.class ) public class HelloWorldCommand { public void say(String what) { System.out.println(helloService.hello(what)); } @Reference( policy=ReferencePolicy.DYNAMIC, policyOption=ReferencePolicyOption.GREEDY, cardinality=ReferenceCardinality.MANDATORY) protected void setHelloService(HelloService helloService) { System.out.println(\"Setting \" + helloService.getClass().getName()); this.helloService = helloService; } protected void unsetHelloService(HelloService helloService) { System.out.println(\"Unsetting helloService \" + helloService.getClass().getName()); if (helloService == this.helloService) { this.helloService = null; } } private HelloService helloService; } Note: We now need a specific set and unset method for our reference, according to the OSGi specification: Try It! Deploy the new command, then restart the service implementations as you like. Validate the behavior of the system. Did the results match your expectations? Well, at least you’ve seen one area where common expectation and the actual behavior of the runtime can differ. But that’s easy to fix, once you know what to expect. More References As promised: Liferay's documentation has fabulous chapters about more options. Because we explicitly only want to cover the bare minimum - please see the documentation for more details. We hope you've gotten some good hints here and have a better understanding of the runtime behavior set: Overriding service references Using Felix Gogo Shell ","srcFilePath":"src/pages/docs/osgi-basics/index.md","id":"osgi-basics","location":"/docs/osgi-basics/","url":"/docs/osgi-basics/","childIds":["your-first-service","create-another-service"]}},"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","id":"docs","location":"/docs/","url":"/docs/","childIds":["osgi-basics","empty",null]}},"childIds":["docs"]}}