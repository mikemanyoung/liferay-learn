var pageComponent=webpackJsonppageComponent([1],{274:function(e,l,t){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,l){if(!(e instanceof l))throw new TypeError("Cannot call a class as a function")}function n(e,l){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!l||"object"!=typeof l&&"function"!=typeof l?e:l}function r(e,l){if("function"!=typeof l&&null!==l)throw new TypeError("Super expression must either be null or a function, not "+typeof l);e.prototype=Object.create(l&&l.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),l&&(Object.setPrototypeOf?Object.setPrototypeOf(e,l):e.__proto__=l)}Object.defineProperty(l,"__esModule",{value:!0});var a=t(1),c=o(a),s=t(3),d=o(s);t(7),t(8),t(9),t(10),t(11),t(12),t(13),t(14),t(15),t(16);var p=t(275),u=o(p),h=function(e){function l(){return i(this,l),n(this,(l.__proto__||Object.getPrototypeOf(l)).apply(this,arguments))}return r(l,e),l}(c.default);d.default.register(h,u.default),l.default=h},275:function(e,l,t){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,l){if(!(e instanceof l))throw new TypeError("Cannot call a class as a function")}function n(e,l){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!l||"object"!=typeof l&&"function"!=typeof l?e:l}function r(e,l){if("function"!=typeof l&&null!==l)throw new TypeError("Super expression must either be null or a function, not "+typeof l);e.prototype=Object.create(l&&l.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),l&&(Object.setPrototypeOf?Object.setPrototypeOf(e,l):e.__proto__=l)}Object.defineProperty(l,"__esModule",{value:!0}),l.templates=l.vUJjd=void 0;var a,c=t(1),s=o(c),d=t(3),p=o(d);goog.loadModule(function(e){function l(e,l,o){var a=function(){i("h6");var l=e.page.description;"function"==typeof l?l():null!=l&&c(l),n("h6"),i("article",null,null,"id","1"),i("h2"),c("Install Liferay Developer Tools"),n("h2"),i("p"),c("In order to follow the exercise in the video, you’ll need to install the following:"),n("p"),i("ul"),i("li"),i("a",null,null,"href","https://web.liferay.com/get-ee-trial/downloads/developer-studio"),c("Liferay Developer Studio"),n("a"),n("li"),i("li"),i("a",null,null,"href","https://customer.liferay.com/documentation/7.0/develop/tutorials/-/official_documentation/tutorials/installing-liferay-workspace"),c("Liferay Workspace"),n("a"),n("li"),n("ul"),i("aside"),i("h6"),r("span",null,null,"class","icon-16-star"),c(" Pro Tip"),n("h6"),i("p"),c("If this exercise text leaves questions open, the next chapter contains a step-by-step walkthrough video of installing Liferay Developer Studio and Liferay Workspace, as well as the exercise itself. Feel free to watch it during the exercise or if you run into problems."),n("p"),n("aside"),n("article"),i("article",null,null,"id","2"),i("h2"),c("Exercise Overview"),n("h2"),i("p"),c("For the first demonstration, we’ll create three projects:"),n("p"),i("ul"),i("li"),c("a simple API for the service"),n("li"),i("li"),c("a service implementation"),n("li"),i("li"),c("a client to call the service"),n("li"),n("ul"),i("p"),c("As we want to be as simple as possible, we’ll stick with the most basic components. Liferay comes with a shell, called "),i("code"),c("Gogo Shell"),n("code"),c(". The Gogo Shell allows us to interact with the OSGi container and execute the client we are creating to run our service."),n("p"),n("article"),i("article",null,null,"id","3"),i("h2"),c("Service API"),n("h2"),i("p"),c("To start, we’ll create a simple API using the wizards provided by Liferay Developer Studio."),n("p"),i("h6"),c("Create the Project"),n("h6"),i("ul"),i("li"),i("code"),c("Open"),n("code"),c(" Liferay Developer Studio"),n("li"),i("li"),c("Create a "),i("code"),c("Liferay Module Project"),n("code"),n("li"),i("li"),c("Name the project: "),i("code"),c("“helloworld-api”"),n("code"),n("li"),i("li"),c("For "),i("code"),c("Project Template Name"),n("code"),c(", select "),i("code"),c("“api”"),n("code"),c(" from the drop down"),n("li"),i("li"),c("Click "),i("code"),c("Next"),n("code"),n("li"),n("ul"),i("h6"),c("Complete the Module Details"),n("h6"),i("ul"),i("li"),c("Component Class Name: "),i("code"),c("HelloService"),n("code"),n("li"),i("li"),c("Package Name: "),i("code"),c("com.liferay.university.hello.api"),n("code"),n("li"),i("li"),c("Click "),i("code"),c("Finish"),n("code"),n("li"),n("ul"),i("h6"),c("Create the Service API"),n("h6"),i("ul"),i("li"),c("Open "),i("code"),c("HelloService.java"),n("code"),n("li"),i("li"),c("Add the "),i("code"),c("hello"),n("code"),c(" method signature below"),n("li"),n("ul"),s({code:"package com.liferay.university.hello.api;\n\npublic interface HelloService {\n    String hello(String parameter);\n}",mode:"text/x-java"},null,o),i("p"),c("Liferay Developer Studio, along with Liferay Workspace, will create a proper project structure for you, including the following "),i("code"),c("bnd.bnd"),n("code"),c(" file:"),n("p"),s({code:"Bundle-Name: helloworld-api\nBundle-SymbolicName: com.liferay.university.hello.api\nBundle-Version: 1.0.0\nExport-Package: com.liferay.university.hello.api",mode:"text"},null,o),i("h6"),c("Deploy to Your Container"),n("h6"),i("p"),c("When this project is built, we’ll have a bundle that we can deploy to any OSGi container. Let's start Liferay within Liferay Developer Studio and use the OSGi container that is embedded into Liferay."),n("p"),i("p"),i("img",null,null,"src","../../images/osgi-basics/Start_Liferay.png","alt","alt img"),n("img"),n("p"),i("h6"),c("Verify Your Service in the Gogo Shell"),n("h6"),i("ul"),i("li"),c("Open a telnet client on localhost, port 11311, to access Gogo Shell"),n("li"),i("li"),c("Type g! lb helloworld to list all the bundles (lb) that have “helloworld” in their name"),n("li"),n("ul"),s({code:"g! lb helloworld\nSTART LEVEL 20\n   ID|State     |Level|Name\n  590|Active    |    1|helloworld-api (1.0.0)",mode:"text"},null,o),n("article"),i("article",null,null,"id","4"),i("h2"),c("Service Implementation"),n("h2"),i("h6"),c("Create"),n("h6"),i("p"),c("Now create a second project with the service implementation."),n("p"),i("ul"),i("li"),c("Create a new "),i("code"),c("service"),n("code"),c(" project in Liferay Developer Studio."),n("li"),i("li"),c("Name the project "),i("code"),c("helloworld-service"),n("code");n("li"),n("ul"),i("p"),c("When the project is created, take a look at the "),i("code"),c("HelloServiceImpl"),n("code"),c(" class:"),n("p"),s({code:"package com.liferay.university.hello.impl;\n\nimport com.liferay.university.hello.api.HelloService;\n\nimport org.osgi.service.component.annotations.Component;\n\n@Component\npublic class HelloServiceImpl implements HelloService {\n    @Override\n    public String hello(String parameter) {\n     return parameter;\n    }\n}",mode:"text/x-java"},null,o),i("p"),c("Notice that the class “HelloService” is showing up as unresolved. To fix this, let’s import our interface."),n("p"),i("p"),c("The gradle implementation in Liferay Workspace makes other modules from the same workspace easily available."),n("p"),i("ul"),i("li"),c("Open build.gradle"),n("li"),i("li"),c("Add the following line to the existing dependencies:"),n("li"),n("ul"),s({code:'compileOnly project(":modules:helloworld-api")',mode:"text"},null,o),i("ul"),i("li"),c("Next, we need to get gradle to pick up the changed dependencies."),n("li"),i("li"),c("Right-click and choose “Gradle/Refresh Gradle Project”"),n("li"),n("ul"),i("p"),c("The resulting project will automatically deploy to Liferay, ending up with both of our projects being available:"),n("p"),s({code:"g! lb helloworld\nSTART LEVEL 20\n   ID|State     |Level|Name\n  590|Active    |   1|helloworld-api (1.0.0)\n  591|Active    |   1|helloworld-service (1.0.0)",mode:"text"},null,o),n("article"),i("article",null,null,"id","5"),i("h2"),c("Calling the Service"),n("h2"),i("p"),c("To call the service, let’s build a quick and dirty Gogo-Shell command that utilizes our service:"),n("p"),i("ul"),i("li"),c("Create another project of type “service”"),n("li"),i("li"),c("Name the project “helloworld-command”"),n("li"),n("ul"),i("p"),i("strong"),c("Note:"),n("strong"),c(" This bundle will also depend on helloworld-api, just like the service implementation. Add the same dependency as above to build.gradle.Next, let’s call the relevant HelloService implementation and display the results in Gogo Shell."),n("p"),s({code:'package com.liferay.university.command;\n\nimport com.liferay.university.hello.api.HelloService;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Reference;\n\n@Component(\n       immediate=true,\n       service = Object.class,\n       property = {\n        "osgi.command.function=say",\n        "osgi.command.scope=custom"\n       }\n     )\npublic class HelloWorldCommand {\n    \n    public void say(String what) {\n     System.out.println(helloService.hello(what));\n    }\n    \n    @Reference    \n    private HelloService helloService;\n}',mode:"text/x-java"},null,o),i("p"),c("The @Component declaration will make sure that we can easily use this class as a command in Gogo Shell. Let’s try this: On Gogo Shell, validate that your service is deployed and active:"),n("p"),i("p"),c("Let’s try this: Validate that your service is deployed and active in Gogo Shell:"),n("p"),s({code:"g! lb helloworld\nSTART LEVEL 20\n   ID|State     |Level|Name\n  590|Active    |   1|helloworld-api (1.0.0)\n  591|Active    |   1|helloworld-service (1.0.0)\n  592|Active    |   1|helloworld-command (1.0.0)",mode:"text"},null,o),i("p"),c("Now type:"),n("p"),s({code:"g! say hello\nhello",mode:"text"},null,o),i("p"),i("strong"),c("Congratulations,"),n("strong"),c(" your first and simplest possible OSGi Declarative Service."),n("p"),n("article"),i("article",null,null,"id","6"),i("h2"),c("Dependency Injection Through OSGi"),n("h2"),i("p"),c("Let’s use this simple code for further experimentation with Gogo Shell and mess with the runtime. Note: Replace “591” with the ID for your service from Gogo Shell."),n("p"),s({code:"g! stop 591\ng! say hello\ngogo: CommandNotFoundException: Command not found: say",mode:"text"},null,o),i("h6"),c("What Happened?"),n("h6"),s({code:"g! lb helloworld\nSTART LEVEL 20\n   ID|State     |Level|Name\n  590|Active    |   1|helloworld-api (1.0.0)\n  591|Resolved  |   1|helloworld-service (1.0.0)\n  592|Resolved  |   1|helloworld-command (1.0.0)",mode:"text"},null,o),i("h6"),c("Again: What Happened?"),n("h6"),i("p"),c("The helloworld-command service has a dependency on “helloworld-service” that is no longer satisfied. Thus, the OSGi runtime has not only stopped the service implementation, but also the helloworld-command service."),n("p"),i("p"),i("strong"),c("Next,"),n("strong"),c(" start the helloworld-service bundle again and see if helloworld-command is restarted as well."),n("p"),i("h5"),c("OSGi Bundle Lifecycle"),n("h5"),i("p"),c("This brings us to the lifecycle of an OSGi bundle. As soon as you have deployed a bundle into an OSGi runtime, the runtime will attempt to resolve all available dependencies:"),n("p"),i("p"),i("img",null,null,"src","../../images/osgi-basics/OSGi_Bundle_Cycle.png","alt","alt img"),n("img"),n("p"),i("p"),c("Let’s keep things simple with this first exercise, and make it more interesting in the next exercise. We’ll introduce a second implementation for our API and see if the new deployment meets your expectations."),n("p"),n("article"),i("input",null,null,"type","hidden","value",e.page.title),n("input"),i("input",null,null,"type","hidden","value",e.site.title),n("input")};d(t.$$assignDefaults({content:a},e),null,o)}goog.module("vUJjd.incrementaldom");var t=goog.require("soy");goog.require("soydata");goog.require("goog.asserts"),goog.require("soy.asserts"),goog.require("goog.i18n.bidi"),goog.require("goog.string");var o=goog.require("incrementaldom"),i=o.elementOpen,n=o.elementClose,r=o.elementVoid,c=(o.elementOpenStart,o.elementOpenEnd,o.text),s=(o.attr,p.default.getTemplate("ElectricCode.incrementaldom","render")),d=p.default.getTemplate("guide.incrementaldom","render");return e.render=l,goog.DEBUG&&(l.soyTemplateName="vUJjd.render"),e.render.params=["page","site"],e.render.types={page:"?",site:"?"},e.templates=a=e,e});var u=function(e){function l(){return i(this,l),n(this,(l.__proto__||Object.getPrototypeOf(l)).apply(this,arguments))}return r(l,e),l}(s.default);p.default.register(u,a),l.vUJjd=u,l.templates=a,l.default=a}},[274]);